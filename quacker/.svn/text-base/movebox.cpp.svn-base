/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <iostream>

#include <QtGui>

#include <game.h>

#include "movebox.h"
#include "quacker.h"
#include "util.h"

MoveBox::MoveBox(QWidget *parent)
	: View(parent)
{
	QVBoxLayout *vlayout = new QVBoxLayout(this);
	vlayout->setMargin(0);

	m_treeWidget = new QTreeWidget(this);

	m_treeWidget->setColumnCount(3);
	m_treeWidget->setSelectionMode(QTreeWidget::ExtendedSelection);
	QStringList headers;
	headers << tr("Move") << tr("Score") << tr("Leave") << tr("Equity");
	m_treeWidget->setHeaderLabels(headers);

	connect(m_treeWidget, SIGNAL(itemSelectionChanged()), this, SLOT(selectionChanged()));

	// the former is single-click to select on all platforms,
	// latter is always double-click to select on most platforms
	connect(m_treeWidget, SIGNAL(itemClicked(QTreeWidgetItem *, int)), this, SLOT(moveActivated(QTreeWidgetItem *)));
	//connect(m_treeWidget, SIGNAL(itemActivated(QTreeWidgetItem *, int)), this, SLOT(moveActivated(QTreeWidgetItem *)));
	
	QHBoxLayout *buttonLayout = new QHBoxLayout;
	m_removeButton = new QPushButton(tr("Remo&ve"));
	connect(m_removeButton, SIGNAL(clicked()), this, SLOT(removeMove()));
	buttonLayout->addWidget(m_removeButton);

	// no more more!
	/*
	m_moreButton = new QPushButton(tr("&More"));
	connect(m_moreButton, SIGNAL(clicked()), this, SLOT(moreMoves()));
	buttonLayout->addWidget(m_moreButton);
	*/

	vlayout->addWidget(m_treeWidget);
	vlayout->addLayout(buttonLayout);
}

void MoveBox::moveActivated(QTreeWidgetItem *item)
{
	if (item == 0)
	{
		emit setCandidateMove(Quackle::Move::createNonmove());
		return;
	}

	// do nothing if no item was clicked or if more than one item is selected
	if (m_treeWidget->selectedItems().size() != 1)
		return;

	for (QMap<Quackle::Move, QTreeWidgetItem *>::iterator it = m_moveMap.begin(); it != m_moveMap.end(); ++it)
	{
		if (it.value() == item)
		{
			emit setCandidateMove(it.key());
			break;
		}
	}
}

void MoveBox::selectionChanged()
{
	m_removeButton->setEnabled(!m_treeWidget->selectedItems().empty());
}

void MoveBox::removeMove()
{
	QList<QTreeWidgetItem *> selectedItems = m_treeWidget->selectedItems();
	if (selectedItems.empty())
		return;

	Quackle::MoveList selectedMoves;

	for (QList<QTreeWidgetItem *>::iterator it = selectedItems.begin(); it != selectedItems.end(); ++it)
	{
		for (QMap<Quackle::Move, QTreeWidgetItem *>::iterator mapIt = m_moveMap.begin(); mapIt != m_moveMap.end(); ++mapIt)
		{
			if (mapIt.value() == *it)
			{
				selectedMoves.push_back(mapIt.key());
				break;
			}
		}
	}

	emit removeCandidateMoves(selectedMoves);

	// TODO make this code work to select the next item
	QTreeWidgetItem *prevLastSelection = m_moveMap.value(selectedMoves.back());
	QTreeWidgetItem *nextSelection = 0;
	const int numItems = m_treeWidget->topLevelItemCount();
	for (int i = 0; i < numItems; ++i)
	{
		if (m_treeWidget->topLevelItem(i) == prevLastSelection)
		{
			if (i != numItems - 1)
			{
				nextSelection = m_treeWidget->topLevelItem(i + 1);
				break;
			}
		}
	}

	if (nextSelection)
	{
		for (QMap<Quackle::Move, QTreeWidgetItem *>::iterator mapIt = m_moveMap.begin(); mapIt != m_moveMap.end(); ++mapIt)
		{
			if (mapIt.value() == nextSelection)
			{
				emit setCandidateMove(mapIt.key());
				break;
			}
		}
	}
}

void MoveBox::moreMoves()
{
	wcout << "add more moves" << endl;
}

// This is complex as it tries to do as little as possible when
// the move list hasn't changed and is sorted the same way,
// so simulations can go as fast as possible.
// Nevertheless, TODO clean this up
void MoveBox::setMoves(const Quackle::MoveList &moves, const Quackle::Move &selectedMove)
{
	bool resorted = false;
	if (m_previousMoves.size() == moves.size())
	{
		Quackle::MoveList::const_iterator prevIt = m_previousMoves.begin();
		Quackle::MoveList::const_iterator prevEnd = m_previousMoves.end();
		const Quackle::MoveList::const_iterator end = moves.end();
		for (Quackle::MoveList::const_iterator it = moves.begin(); it != end; ++it, ++prevIt)
		{
			if (!(*prevIt == *it))
			{
				resorted = true;
				break;
			}
		}
	}
	else
	{
		// to continue on normal route:
		resorted = true;
		
		// or instead just go plain way
		//setMovesBrashly(moves, selectedMove);
		//return;
	}

	bool hasOldItems = false;
	bool hasNewItems = false;

	Quackle::MoveList::const_iterator end(moves.end());
	for (Quackle::MoveList::const_iterator it = moves.begin(); it != end; ++it)
	{
		QMap<Quackle::Move, QTreeWidgetItem *>::const_iterator mapEnd(m_moveMap.end());
		for (QMap<Quackle::Move, QTreeWidgetItem *>::const_iterator mapIt = m_moveMap.begin(); mapIt != mapEnd; ++mapIt)
		{
			if (mapIt.key() == *it)
			{
				mapIt.value()->setText(EquityColumn, QString::number((*it).equity));

				if (resorted)
				{
					m_treeWidget->addTopLevelItem(m_treeWidget->takeTopLevelItem(m_treeWidget->indexOfTopLevelItem(mapIt.value())));
				}

				hasOldItems = true;
				goto foundFirstPass;
			}
		}

		hasNewItems = true;
		m_moveMap.insert(*it, createItem(*it));

		foundFirstPass:
		continue;
	}

	if (resorted)
	{
		for (QMutableMapIterator<Quackle::Move, QTreeWidgetItem *> mapIt(m_moveMap); mapIt.hasNext(); )
		{
			mapIt.next();

			for (Quackle::MoveList::const_iterator it = moves.begin(); it != end; ++it)
				if (mapIt.key() == *it)
					goto found;

			delete mapIt.value();
			mapIt.remove();

			found:
			continue;
		}
	}

	if (m_moveMap.contains(selectedMove))
	{
		m_treeWidget->setCurrentItem(m_moveMap.value(selectedMove));
		selectionChanged();
	}

	if (hasNewItems)
		QTimer::singleShot(0, this, SLOT(checkGeometry()));

	m_previousMoves = moves;
	m_previousSelection = selectedMove;
}

void MoveBox::setMovesBrashly(const Quackle::MoveList &moves, const Quackle::Move &selectedMove)
{
	m_treeWidget->clear();
	m_moveMap.clear();

	Quackle::MoveList::const_iterator end(moves.end());
	for (Quackle::MoveList::const_iterator it = moves.begin(); it != end; ++it)
	{
		m_moveMap.insert(*it, createItem(*it));
	}

	if (m_moveMap.contains(selectedMove))
	{
		m_treeWidget->setCurrentItem(m_moveMap.value(selectedMove));
		selectionChanged();
	}

	QTimer::singleShot(0, this, SLOT(checkGeometry()));

	m_previousMoves = moves;
	m_previousSelection = selectedMove;
}

void MoveBox::checkGeometry()
{
	m_treeWidget->resizeColumnToContents(EquityColumn);
	m_treeWidget->resizeColumnToContents(LeaveColumn);
	m_treeWidget->resizeColumnToContents(ScoreColumn);
	m_treeWidget->resizeColumnToContents(PlayColumn);
}

void MoveBox::setSelectedMove(const Quackle::Move &move)
{
	if (m_moveMap.contains(move))
		m_treeWidget->setCurrentItem(m_moveMap.value(move));
}

void MoveBox::positionChanged(const Quackle::GamePosition &position)
{
	m_rack = position.currentPlayer().rack();
	setMoves(position.moves(), position.moveMade());
}

void MoveBox::movesChanged(const Quackle::MoveList &moves)
{
	setMoves(moves, m_previousSelection);
}

QTreeWidgetItem *MoveBox::createItem(const Quackle::Move &move)
{
	QTreeWidgetItem *item = new QTreeWidgetItem(m_treeWidget);
	item->setText(PlayColumn, Util::moveToDetailedString(move));
	item->setText(ScoreColumn, QString::number(move.score));
	item->setText(LeaveColumn, TopLevel::self()->arrangeLettersForUser(Util::stringToQString((m_rack - move).tiles())));
	item->setText(EquityColumn, QString::number(move.equity));

	return item;
}

