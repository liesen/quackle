/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef QUACKER_MOVEBOX_H
#define QUACKER_MOVEBOX_H

#include <QMap>

#include <move.h>
#include <rack.h>

#include "view.h"

class QPushButton;
class QTreeWidget;
class QTreeWidgetItem;

class MoveBox : public View
{
Q_OBJECT

public:
	MoveBox(QWidget *parent = 0);

	void setMoves(const Quackle::MoveList &moves, const Quackle::Move &selectedMove);
	void setMovesBrashly(const Quackle::MoveList &moves, const Quackle::Move &selectedMove);
	void setSelectedMove(const Quackle::Move &move);

public slots:
	virtual void positionChanged(const Quackle::GamePosition &position);
	virtual void movesChanged(const Quackle::MoveList &moves);

private slots:
	void moveActivated(QTreeWidgetItem *item);
	void selectionChanged();
	void removeMove();
	void moreMoves();
	void checkGeometry();

protected:
	QTreeWidgetItem *createItem(const Quackle::Move &move);

	QMap<Quackle::Move, QTreeWidgetItem *> m_moveMap;
	Quackle::MoveList m_previousMoves;
	Quackle::Move m_previousSelection;
	Quackle::Rack m_rack;

	enum Columns { PlayColumn = 0, ScoreColumn = 1, LeaveColumn = 2, EquityColumn = 3 };
	QTreeWidget *m_treeWidget;
	QPushButton *m_removeButton;
	QPushButton *m_moreButton;
};

#endif
