/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "view.h"

BaseView::BaseView(QWidget *parent)
	: QFrame(parent)
{
}

BaseView::~BaseView()
{
}

/////////

View::View(QWidget *parent)
	: BaseView(parent)
{
}

View::~View()
{
}

void View::grabFocus()
{
}

void View::positionChanged(const Quackle::GamePosition &position)
{
	for (QList<View *>::iterator it = m_subviews.begin(); it != m_subviews.end(); ++it)
		(*it)->positionChanged(position);
}

void View::movesChanged(const Quackle::MoveList &moves)
{
	for (QList<View *>::iterator it = m_subviews.begin(); it != m_subviews.end(); ++it)
		(*it)->movesChanged(moves);
}

void View::connectSubviewSignals()
{
	for (QList<View *>::iterator it = m_subviews.begin(); it != m_subviews.end(); ++it)
	{
		connect(*it, SIGNAL(statusMessage(const QString &)), this, SIGNAL(statusMessage(const QString &)));
		connect(*it, SIGNAL(setCandidateMove(const Quackle::Move &)), this, SIGNAL(setCandidateMove(const Quackle::Move &)));
		connect(*it, SIGNAL(setRack(const Quackle::Rack &)), this, SIGNAL(setRack(const Quackle::Rack &)));
	}
}

/////////

HistoryView::HistoryView(QWidget *parent)
	: BaseView(parent)
{
}

HistoryView::~HistoryView()
{
}

void HistoryView::historyChanged(const Quackle::History & /* history */)
{
}

