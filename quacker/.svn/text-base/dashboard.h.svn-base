/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef QUACKER_DASHBOARD_H
#define QUACKER_DASHBOARD_H

#include <QList>

#include <game.h>

#include "view.h"

class QFrame;
class QHBoxLayout;
class QLabel;
class QVBoxLayout;

enum WinnerStatus { Winner = 0, Cowinner, Nonwinner };

class PlayerBrief : public QFrame
{
Q_OBJECT

public:
	PlayerBrief();

	void setCurrentPlayer(bool isCurrent);
	void setWinnerStatus(WinnerStatus isWinner);
	void setPlayer(const Quackle::Player &player);

private:
	QVBoxLayout *m_vlayout;

	bool m_isCurrent;
	WinnerStatus m_winnerStatus;

	QLabel *m_name;
	QLabel *m_score;
};

inline void PlayerBrief::setCurrentPlayer(bool isCurrent)
{
	m_isCurrent = isCurrent;
}

inline void PlayerBrief::setWinnerStatus(WinnerStatus isWinner)
{
	m_winnerStatus = isWinner;
}

class Dashboard : public HistoryView
{
Q_OBJECT

public:
	Dashboard(QWidget *parent = 0);
	virtual ~Dashboard();

public slots:
	virtual void historyChanged(const Quackle::History &history);

protected:
	QList<PlayerBrief *> m_briefs;

	QHBoxLayout *m_hlayout;
};

#endif
