/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <move.h>

#include "quacker.h"

#include "util.h"

QString Util::moveToDetailedString(const Quackle::Move &move, QString prettyTiles)
{
	if (prettyTiles.isNull())
		prettyTiles = stringToQString(move.prettyTiles());

	QString ret;

	switch (move.action)
	{
	case Quackle::Move::Pass:
		ret = TopLevel::tr("Pass");
		break;
	
	case Quackle::Move::Exchange:
		ret = TopLevel::tr("Exch. %1").arg(prettyTiles);
		break;
	
	case Quackle::Move::UnusedTilesBonus:
		ret = TopLevel::tr("2*(%1)").arg(TopLevel::self()->arrangeLettersForUser(stringToQString(move.usedTiles())));
		break;
	
	case Quackle::Move::ScoreAddition:
		ret = TopLevel::tr("%1 point bonus").arg(move.score);
		break;
	
	case Quackle::Move::TimePenalty:
		ret = TopLevel::tr("%1 point time penalty").arg(move.score);
		break;
	
	case Quackle::Move::Nonmove:
		ret = TopLevel::tr("None");
		break;
	
	case Quackle::Move::Place:
		ret = stringToQString(move.positionString()) + " ";
		ret += prettyTiles;
		break;
	}

	return ret;
}

QString Util::moveToSensitiveString(const Quackle::Move &move)
{
	QString ret;

	if (move.action == Quackle::Move::Exchange)
		ret = TopLevel::tr("Exch. %1").arg(move.prettyTiles().length());
	else
		ret = moveToDetailedString(move);

	return ret;
}

QString Util::arrangeLetters(const QString &word, const QString &sortOrder)
{
	unsigned int counts[27];
	
	for (unsigned int i = 0; i < 27; i++)
		counts[i] = 0;

	for (int i = 0; i < word.length(); i++)
	{
		char c = word.at(i).toLatin1();
		if ((c >= 'A') && (c <= 'Z'))
			counts[c - 'A']++;
		else if (c == '?')
			counts[26]++;
	}

	QString ret;

	for (int i = 0; i < sortOrder.length(); i++)
	{
		char c = sortOrder.at(i).toLatin1();
		unsigned int n;

		if ((c >= 'A') && (c <= 'Z'))
			n = counts[c - 'A'];
		else 
			n = counts[26];

		for (unsigned int j = 0; j < n; j++)
			ret += c;
	}
 
    return ret;
}

QString Util::alphagram(const QString &word) 
{
	return arrangeLetters(word, "ABCDEFGHIJKLMNOPQRSTUVWXYZ?");
}

