/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef QUACKER_GRAPHICALBOARD_H
#define QUACKER_GRAPHICALBOARD_H

#include <QColor>
#include <QWidget>
#include <QHash>
#include <QMap>
#include <QPixmap>
#include <QSize>

#include <board.h>

#include "boarddisplay.h"

class QFrame;
class QGridLayout;

class GraphicalBoardFrame;
class MarkWidget;
class TileWidget;

namespace Quackle
{
	class Board;
	class Move;
}

unsigned int qHash(const QColor &color);

class PixmapCacher
{
public:
	PixmapCacher();
	static PixmapCacher *self();

	QColor letterColor;
	QColor DLSColor;
	QColor TLSColor;
	QColor DWSColor;
	QColor TWSColor;

	QColor QLSColor;
	QColor QWSColor;
	
	QColor nothingColor;

	QColor cementedLetterTextColor;
	QColor uncementedLetterTextColor;

	QColor markColor;
	QColor markTextColor;

	QFont tileFont;

	bool contains(const QColor &color) const;
	QPixmap get(const QColor &color) const;
	void put(const QColor &color, const QPixmap &pixmap);

	void invalidate();

private:
	static PixmapCacher *m_self;
	QHash<QColor, QPixmap> m_pixmaps;
};

class GraphicalBoard : public BoardWithQuickEntry
{
Q_OBJECT

public:
	GraphicalBoard(QWidget *parent = 0);
	~GraphicalBoard();

	GraphicalBoardFrame *boardFrame() { return m_boardFrame; }

protected slots:
	virtual void expandToFullWidth();
	virtual void resizeEvent(QResizeEvent *event);

private:
	GraphicalBoardFrame *m_boardFrame;
	QWidget *m_boardWrapper;
};

class GraphicalBoardFrame : public View
{
Q_OBJECT

public:
	GraphicalBoardFrame(QWidget *parent = 0);
	~GraphicalBoardFrame();

	static const double s_markOtherLengthMultiplier = 0.6;
	static const int s_highlightFactor = 125;

	// ArrowRight is direction after initial click;
	// when we increment to ArrowWorm we restart with it
	enum ArrowDirection { NoArrow = 0, ArrowRight = 1, ArrowDown = 2, /* ... */ ArrowWorm = 3 };

	const static int s_firstArrowDirection = ArrowRight;

public slots:
	virtual void positionChanged(const Quackle::GamePosition &position);
	virtual void expandToSize(const QSize &maxSize);

protected slots:
	void backspaceHandler();
	void deleteHandler();
	void submitHandler();
	void appendHandler(const QString &text, bool shiftPressed);

	void setGlobalCandidate();

	void tileClicked(const QSize &tileLocation);
	void prepare();

	void setLocalCandidate(const Quackle::Move &candidate);

protected:
	virtual void keyPressEvent(QKeyEvent *e);
	virtual void paintEvent(QPaintEvent *event);
	virtual void mousePressEvent(QMouseEvent *event);

	QPixmap generateBoardPixmap();

	// these three are misnamed - they just set up the fields of the
	// tilewidgets
	void drawBoard(const Quackle::Board &board);
	void drawMove(const Quackle::Move &move);
	void drawArrow(const QSize &location, int arrowDirection);

	void deleteWidgets();
	void recreateWidgets();
	void resizeWidgets(int sideLength);

	void addTile(const QSize &loc, TileWidget *tile);
	void removeTile(const QSize &loc);
	TileWidget *tileAt(const QSize &loc);

	// returns invalid size if there no tile at point
	// or the tile at relative-to-widget coordinates pos
	QSize locationForPosition(const QPoint &pos);

	QPoint coordinatesOfTile(const QSize &loc);

	void addMark(const QSize &loc, MarkWidget *tile);
	void removeMark(const QSize &loc);
	TileWidget *markAt(const QSize &loc);
	QPoint coordinatesOfMark(const QSize &loc);

	void prettifyAndSetLocalCandidate(const Quackle::Move &candidate);

signals:
	void localCandidateChanged(const Quackle::Move &candidate);
	void tileFontChanged(const QFont &font);

private:
	QMap<QSize, TileWidget *> m_tileWidgets;
	QSize m_boardSize;
	QSize m_sizeForBoard;

	Quackle::Board m_board;

	QPixmap m_pixmap;

	// when empty, user has set no arrow
	QSize m_arrowRoot;
	Quackle::Move m_candidate;
	int m_arrowDirection;

	void resetArrow();
	bool hasArrow() const;
	QSize arrowVector() const;
	bool hasCandidate() const;
	void ensureCandidatePlacedProperly();

	bool isOnBoard(const QSize &location) const;

	QSize m_maxSize;

	// side length of one tile
	int m_sideLength;

	// shorter side length of a mark
	QPoint m_tilesOffset;

	PixmapCacher m_pixmapCacher;
};

class TileWidget
{
public:
	TileWidget();
	virtual ~TileWidget();

	virtual void setSideLength(int sideLength);
	int sideLength() const;

	QSize size() const;

	virtual void setInformation(const Quackle::Board::TileInformation &information);
	Quackle::Board::TileInformation information() const;

	virtual void setOriginalInformation(const Quackle::Board::TileInformation &originalInformation);
	virtual void setLocation(const QSize &location);

	virtual void setCemented(bool cemented);
	bool cemented() const;

	virtual void setArrowDirection(int arrowDirection);
	GraphicalBoardFrame::ArrowDirection arrowDirection() const;

	// to be called after the set* functions to show
	// the correct things
	virtual void prepare();

	const QPixmap &tilePixmap();

	virtual QColor tileColor();
	virtual QColor tileColor(const Quackle::Board::TileInformation &information);
	virtual QColor backgroundColor();
	virtual QColor letterTextColor();
	virtual QString letterText();
	virtual QFont letterFont();

protected:
	QPixmap generateTilePixmap();

	virtual void setOurSize(const QSize &size);
	virtual void setOurSize(int width, int height);

	Quackle::Board::TileInformation m_information;
	bool m_cemented;
	int m_arrowDirection;

	QColor m_backgroundColor;
	QSize m_location;

	QSize m_size;
	QPixmap m_pixmap;
};

class MarkWidget : public TileWidget
{
public:
	MarkWidget();
	virtual ~MarkWidget();

	virtual void setSideLength(int sideLength);
	virtual QColor tileColor();
	virtual QColor letterTextColor();
	virtual QFont letterFont();
	virtual QString letterText();

	void setRow(int row);
	void setCol(int col);
	void setCapstone();

protected:
	bool m_horizontal;
	bool m_capstone;
	QString m_letterText;
};

bool operator<(const QSize &firstSize, const QSize &secondSize);

#endif
