/*
 * Copyright (c) 2005-2006 Jason Katz-Brown and John O'Laughlin.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The names of the authors may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef QUACKER_VIEW_H
#define QUACKER_VIEW_H

#include <QFrame>
#include <QList>

namespace Quackle
{
	class GamePosition;
	class History;
	class HistoryLocation;
	class Move;
	class MoveList;
	class Rack;
}

class BaseView : public QFrame
{
Q_OBJECT

public:
	BaseView(QWidget *parent = 0);
	virtual ~BaseView();

signals:
	// tell user of a message, usually via status bar
	void statusMessage(const QString &message);
};

class View : public BaseView
{
Q_OBJECT

public:
	View(QWidget *parent = 0);
	virtual ~View();

signals:
	// emit to alert the rest of the application to show this
	// as candidate move - may eventually trigger positionChanged
	// in response
	void setCandidateMove(const Quackle::Move &move);
	void removeCandidateMoves(const Quackle::MoveList &moves);

	// emit to alert the rest of the application to reset the current
	// player's rack - may eventually trigger positionChanged
	// in response
	void setRack(const Quackle::Rack &rack);

public slots:
	// called whenever game position changes; the board only changes when a
	// move is made, but the candidate move (accessible from position.moveMade(),
	// and the resulting board from position.boardAfterMoveMade()) change alone too.
	// This is called in both cases.
	// 
	// The default implementation calls positionChanged(position) for all subviews
	// in m_subviews.
	virtual void positionChanged(const Quackle::GamePosition &position);

	// called when user starts a simulation and this move list should
	// supercede that from the position
	virtual void movesChanged(const Quackle::MoveList &moves);

	virtual void grabFocus();

protected:
	// keep a list of View subclasses in m_subviews
	// and call this so their signals are emitted from this object
	void connectSubviewSignals();
	QList<View *> m_subviews;
};

class HistoryView : public BaseView
{
Q_OBJECT

public:
	HistoryView(QWidget *parent = 0);
	virtual ~HistoryView();

signals:
	// emit to alert the rest of the application to show this
	// as candidate move - may eventually trigger positionChanged
	// in response
	void goToHistoryLocation(const Quackle::HistoryLocation &location);

public slots:
	// called whenever history is added to
	virtual void historyChanged(const Quackle::History &history);
};

#endif
